(function (React, adminjs, designSystem) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  const LinkComponent = props => {
    const {
      record
    } = props;
    const lat = record.params["address.location.coordinates.0"];
    const long = record.params["address.location.coordinates.1"];
    console.log(record);
    const mapsLink = `http://google.com/maps/@${lat},${long},15z`;
    return /*#__PURE__*/React__default.default.createElement("a", {
      href: mapsLink,
      target: "_blank",
      rel: "noopener noreferrer"
    }, "View Location");
  };

  const api$2 = new adminjs.ApiClient();
  const VolunteerFilteredSelect = ({
    property,
    record,
    onChange
  }) => {
    const [volunteers, setVolunteers] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    React.useEffect(() => {
      const fetchVolunteers = async () => {
        setLoading(true);
        const response = await api$2.resourceAction({
          resourceId: 'userProfile',
          actionName: 'list',
          params: {
            'filters.role': 'volunteer'
          }
        });
        if (response.data && response.data.records) {
          console.log('mapping ', response.data.records);
          setVolunteers(response.data.records.map(v => ({
            value: v.id,
            label: v.params.name
          })));
        }
        setLoading(false);
      };
      fetchVolunteers();
    }, []);
    const handleChange = selected => {
      onChange(property.name, selected ? selected.value : '');
    };
    const selectedOption = volunteers.find(opt => opt.value === record.params[property.name]) || null;
    return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
      mb: 56
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      required: true
    }, 'Select Volunteer'), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      options: volunteers,
      value: selectedOption,
      isLoading: loading,
      onChange: handleChange,
      isClearable: true,
      placeholder: "Select volunteer\u2026"
    }), property.description && /*#__PURE__*/React__default.default.createElement(designSystem.FormMessage, null, property.description));
  };

  const api$1 = new adminjs.ApiClient();
  const StatusFilteredSelect = ({
    property,
    record,
    onChange
  }) => {
    const [status, setStatus] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    React.useEffect(() => {
      const fetchStatus = async () => {
        setLoading(true);
        const response = await api$1.resourceAction({
          resourceId: 'AidRequest',
          actionName: 'list',
          params: {
            'filters.status': 'rejected'
          }
        });
        console.log('logogdgd', response);
        if (response.data && response.data.records) {
          console.log('mapping ', response.data.records);
          setStatus(response.data.records.map(v => {
            console.log("record", v.params);
            return {
              value: v.id,
              // label: `${v.params["address.addressLine1"]} - ${v.params["donationType"]}`
              label: v.params.name
            };
          }));
        }
        setLoading(false);
      };
      fetchStatus();
    }, []);
    const handleChange = selected => {
      onChange(property.name, selected ? selected.value : '');
    };
    const selectedOption = status.find(opt => opt.value === record.params[property.name]) || null;
    return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
      mb: 56
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      required: true
    }, 'Select Aid Request'), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      options: status,
      value: selectedOption,
      isLoading: loading,
      onChange: handleChange,
      isClearable: true,
      placeholder: "Select Aid Request"
    }), property.description && /*#__PURE__*/React__default.default.createElement(designSystem.FormMessage, null, property.description));
  };

  const api = new adminjs.ApiClient();
  const DonationRequestStatusFilteredSelect = ({
    property,
    record,
    onChange
  }) => {
    const [status, setStatus] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    React.useEffect(() => {
      const fetchStatus = async () => {
        setLoading(true);
        const response = await api.resourceAction({
          resourceId: 'DonationRequest',
          actionName: 'list',
          params: {
            'filters.status': 'accepted'
          }
        });
        console.log('logogdgd', response);
        if (response.data && response.data.records) {
          console.log('mapping ', response.data.records);
          setStatus(response.data.records.map(v => {
            console.log("record", v.params);
            return {
              value: v.id,
              label: v.params.name
            };
          }));
        }
        setLoading(false);
      };
      fetchStatus();
    }, []);
    const handleChange = selected => {
      onChange(property.name, selected ? selected.value : '');
    };
    const selectedOption = status.find(opt => opt.value === record.params[property.name]) || null;
    return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
      mb: 56
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      required: true
    }, 'Select Donation Request'), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      options: status,
      value: selectedOption,
      isLoading: loading,
      onChange: handleChange,
      isClearable: true,
      placeholder: "Select Donation Request"
    }), property.description && /*#__PURE__*/React__default.default.createElement(designSystem.FormMessage, null, property.description));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.LinkComponent = LinkComponent;
  AdminJS.UserComponents.VolunteerFilteredSelect = VolunteerFilteredSelect;
  AdminJS.UserComponents.StatusFilteredSelect = StatusFilteredSelect;
  AdminJS.UserComponents.DonationRequestStatusFilteredSelect = DonationRequestStatusFilteredSelect;

})(React, AdminJS, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvTGlua0NvbXBvbmVudC5qc3giLCIuLi9zcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvVm9sdW50ZWVyRmlsdGVyZWRTZWxlY3QuanN4IiwiLi4vc3JjL2Rhc2hib2FyZC9jb21wb25lbnRzL0FpZFJlcXVlc3RTdGF0dXNGaWx0ZXJlZFNlbGVjdC5qc3giLCIuLi9zcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvRG9uYXRpb25SZXF1ZXN0U3RhdHVzRmlsdGVyZWRTZWxlY3QuanN4IiwiZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmNvbnN0IExpbmtDb21wb25lbnQgPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHsgcmVjb3JkIH0gPSBwcm9wc1xyXG4gICAgY29uc3QgbGF0ICA9IHJlY29yZC5wYXJhbXNbXCJhZGRyZXNzLmxvY2F0aW9uLmNvb3JkaW5hdGVzLjBcIl1cclxuICAgIGNvbnN0IGxvbmcgPSByZWNvcmQucGFyYW1zW1wiYWRkcmVzcy5sb2NhdGlvbi5jb29yZGluYXRlcy4xXCJdXHJcbiAgY29uc29sZS5sb2cocmVjb3JkKVxyXG4gIGNvbnN0IG1hcHNMaW5rID0gYGh0dHA6Ly9nb29nbGUuY29tL21hcHMvQCR7bGF0fSwke2xvbmd9LDE1emBcclxuXHJcbiAgcmV0dXJuIChcclxuXHJcblxyXG4gICAgICA8YSBocmVmPXttYXBzTGlua30gdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPlxyXG4gICAgICAgIFZpZXcgTG9jYXRpb25cclxuICAgICAgPC9hPlxyXG5cclxuICAgIFxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGlua0NvbXBvbmVudFxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQXBpQ2xpZW50IH0gZnJvbSAnYWRtaW5qcyc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgTGFiZWwsIFNlbGVjdCwgRm9ybU1lc3NhZ2UgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKTtcclxuXHJcbmNvbnN0IFZvbHVudGVlckZpbHRlcmVkU2VsZWN0ID0gKHsgcHJvcGVydHksIHJlY29yZCwgb25DaGFuZ2UgfSkgPT4ge1xyXG4gIGNvbnN0IFt2b2x1bnRlZXJzLCBzZXRWb2x1bnRlZXJzXSA9IHVzZVN0YXRlKFtdKTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGZldGNoVm9sdW50ZWVycyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgc2V0TG9hZGluZyh0cnVlKTtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucmVzb3VyY2VBY3Rpb24oe1xyXG4gICAgICAgIHJlc291cmNlSWQ6ICd1c2VyUHJvZmlsZScsXHJcbiAgICAgICAgYWN0aW9uTmFtZTogJ2xpc3QnLFxyXG4gICAgICAgIHBhcmFtczogeyAnZmlsdGVycy5yb2xlJzogJ3ZvbHVudGVlcicgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEucmVjb3Jkcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtYXBwaW5nICcsIHJlc3BvbnNlLmRhdGEucmVjb3JkcylcclxuICAgICAgICBzZXRWb2x1bnRlZXJzKHJlc3BvbnNlLmRhdGEucmVjb3Jkcy5tYXAodiA9PiAoe1xyXG4gICAgICAgICAgdmFsdWU6IHYuaWQsXHJcbiAgICAgICAgICBsYWJlbDogdi5wYXJhbXMubmFtZSxcclxuICAgICAgICB9KSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIGZldGNoVm9sdW50ZWVycygpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gc2VsZWN0ZWQgPT4ge1xyXG4gICAgb25DaGFuZ2UocHJvcGVydHkubmFtZSwgc2VsZWN0ZWQgPyBzZWxlY3RlZC52YWx1ZSA6ICcnKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBzZWxlY3RlZE9wdGlvbiA9IHZvbHVudGVlcnMuZmluZChvcHQgPT4gb3B0LnZhbHVlID09PSByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdKSB8fCBudWxsO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEZvcm1Hcm91cCBtYj17NTZ9PlxyXG4gICAgICA8TGFiZWwgcmVxdWlyZWQ+eydTZWxlY3QgVm9sdW50ZWVyJ308L0xhYmVsPlxyXG4gICAgICA8U2VsZWN0XHJcbiAgICAgICAgb3B0aW9ucz17dm9sdW50ZWVyc31cclxuICAgICAgICB2YWx1ZT17c2VsZWN0ZWRPcHRpb259XHJcbiAgICAgICAgaXNMb2FkaW5nPXtsb2FkaW5nfVxyXG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgaXNDbGVhcmFibGVcclxuICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCB2b2x1bnRlZXLigKZcIlxyXG4gICAgICAvPlxyXG4gICAgICB7cHJvcGVydHkuZGVzY3JpcHRpb24gJiYgKFxyXG4gICAgICAgIDxGb3JtTWVzc2FnZT57cHJvcGVydHkuZGVzY3JpcHRpb259PC9Gb3JtTWVzc2FnZT5cclxuICAgICAgKX1cclxuICAgIDwvRm9ybUdyb3VwPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWb2x1bnRlZXJGaWx0ZXJlZFNlbGVjdDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEFwaUNsaWVudCB9IGZyb20gJ2FkbWluanMnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIExhYmVsLCBTZWxlY3QsIEZvcm1NZXNzYWdlIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpQ2xpZW50KCk7XHJcblxyXG5jb25zdCBTdGF0dXNGaWx0ZXJlZFNlbGVjdCA9ICh7IHByb3BlcnR5LCByZWNvcmQsIG9uQ2hhbmdlIH0pID0+IHtcclxuICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGUoW10pO1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgZmV0Y2hTdGF0dXMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnJlc291cmNlQWN0aW9uKHtcclxuICAgICAgICByZXNvdXJjZUlkOiAnQWlkUmVxdWVzdCcsXHJcbiAgICAgICAgYWN0aW9uTmFtZTogJ2xpc3QnLFxyXG4gICAgICAgIHBhcmFtczogeyAnZmlsdGVycy5zdGF0dXMnOiAncmVqZWN0ZWQnIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zb2xlLmxvZygnbG9nb2dkZ2QnLCByZXNwb25zZSlcclxuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5yZWNvcmRzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ21hcHBpbmcgJywgcmVzcG9uc2UuZGF0YS5yZWNvcmRzKVxyXG4gICAgICAgIHNldFN0YXR1cyhyZXNwb25zZS5kYXRhLnJlY29yZHMubWFwKHYgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJyZWNvcmRcIiwgdi5wYXJhbXMpXHJcbiAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgdmFsdWU6IHYuaWQsXHJcbiAgICAgICAgICAgIC8vIGxhYmVsOiBgJHt2LnBhcmFtc1tcImFkZHJlc3MuYWRkcmVzc0xpbmUxXCJdfSAtICR7di5wYXJhbXNbXCJkb25hdGlvblR5cGVcIl19YFxyXG4gICAgICAgICAgICBsYWJlbDogdi5wYXJhbXMubmFtZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIGZldGNoU3RhdHVzKCk7XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBzZWxlY3RlZCA9PiB7XHJcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5uYW1lLCBzZWxlY3RlZCA/IHNlbGVjdGVkLnZhbHVlIDogJycpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gc3RhdHVzLmZpbmQob3B0ID0+IG9wdC52YWx1ZSA9PT0gcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXSkgfHwgbnVsbDtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxGb3JtR3JvdXAgbWI9ezU2fT5cclxuICAgICAgPExhYmVsIHJlcXVpcmVkPnsnU2VsZWN0IEFpZCBSZXF1ZXN0J308L0xhYmVsPlxyXG4gICAgICA8U2VsZWN0XHJcbiAgICAgICAgb3B0aW9ucz17c3RhdHVzfVxyXG4gICAgICAgIHZhbHVlPXtzZWxlY3RlZE9wdGlvbn1cclxuICAgICAgICBpc0xvYWRpbmc9e2xvYWRpbmd9XHJcbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICBpc0NsZWFyYWJsZVxyXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IEFpZCBSZXF1ZXN0XCJcclxuICAgICAgLz5cclxuICAgICAge3Byb3BlcnR5LmRlc2NyaXB0aW9uICYmIChcclxuICAgICAgICA8Rm9ybU1lc3NhZ2U+e3Byb3BlcnR5LmRlc2NyaXB0aW9ufTwvRm9ybU1lc3NhZ2U+XHJcbiAgICAgICl9XHJcbiAgICA8L0Zvcm1Hcm91cD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3RhdHVzRmlsdGVyZWRTZWxlY3Q7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBcGlDbGllbnQgfSBmcm9tICdhZG1pbmpzJztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBMYWJlbCwgU2VsZWN0LCBGb3JtTWVzc2FnZSB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaUNsaWVudCgpO1xyXG5cclxuY29uc3QgRG9uYXRpb25SZXF1ZXN0U3RhdHVzRmlsdGVyZWRTZWxlY3QgPSAoeyBwcm9wZXJ0eSwgcmVjb3JkLCBvbkNoYW5nZSB9KSA9PiB7XHJcbiAgY29uc3QgW3N0YXR1cywgc2V0U3RhdHVzXSA9IHVzZVN0YXRlKFtdKTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGZldGNoU3RhdHVzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5yZXNvdXJjZUFjdGlvbih7XHJcbiAgICAgICAgcmVzb3VyY2VJZDogJ0RvbmF0aW9uUmVxdWVzdCcsXHJcbiAgICAgICAgYWN0aW9uTmFtZTogJ2xpc3QnLFxyXG4gICAgICAgIHBhcmFtczogeyAnZmlsdGVycy5zdGF0dXMnOiAnYWNjZXB0ZWQnIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zb2xlLmxvZygnbG9nb2dkZ2QnLCByZXNwb25zZSlcclxuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5yZWNvcmRzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ21hcHBpbmcgJywgcmVzcG9uc2UuZGF0YS5yZWNvcmRzKVxyXG4gICAgICAgIHNldFN0YXR1cyhyZXNwb25zZS5kYXRhLnJlY29yZHMubWFwKHYgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJyZWNvcmRcIiwgdi5wYXJhbXMpXHJcbiAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgdmFsdWU6IHYuaWQsXHJcbiAgICAgICAgICAgIGxhYmVsOiB2LnBhcmFtcy5uYW1lXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgZmV0Y2hTdGF0dXMoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHNlbGVjdGVkID0+IHtcclxuICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIHNlbGVjdGVkID8gc2VsZWN0ZWQudmFsdWUgOiAnJyk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBzdGF0dXMuZmluZChvcHQgPT4gb3B0LnZhbHVlID09PSByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdKSB8fCBudWxsO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEZvcm1Hcm91cCBtYj17NTZ9PlxyXG4gICAgICA8TGFiZWwgcmVxdWlyZWQ+eydTZWxlY3QgRG9uYXRpb24gUmVxdWVzdCd9PC9MYWJlbD5cclxuICAgICAgPFNlbGVjdFxyXG4gICAgICAgIG9wdGlvbnM9e3N0YXR1c31cclxuICAgICAgICB2YWx1ZT17c2VsZWN0ZWRPcHRpb259XHJcbiAgICAgICAgaXNMb2FkaW5nPXtsb2FkaW5nfVxyXG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgaXNDbGVhcmFibGVcclxuICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBEb25hdGlvbiBSZXF1ZXN0XCJcclxuICAgICAgLz5cclxuICAgICAge3Byb3BlcnR5LmRlc2NyaXB0aW9uICYmIChcclxuICAgICAgICA8Rm9ybU1lc3NhZ2U+e3Byb3BlcnR5LmRlc2NyaXB0aW9ufTwvRm9ybU1lc3NhZ2U+XHJcbiAgICAgICl9XHJcbiAgICA8L0Zvcm1Hcm91cD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRG9uYXRpb25SZXF1ZXN0U3RhdHVzRmlsdGVyZWRTZWxlY3Q7XHJcbiIsIkFkbWluSlMuVXNlckNvbXBvbmVudHMgPSB7fVxuaW1wb3J0IExpbmtDb21wb25lbnQgZnJvbSAnLi4vc3JjL2Rhc2hib2FyZC9jb21wb25lbnRzL0xpbmtDb21wb25lbnQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkxpbmtDb21wb25lbnQgPSBMaW5rQ29tcG9uZW50XG5pbXBvcnQgVm9sdW50ZWVyRmlsdGVyZWRTZWxlY3QgZnJvbSAnLi4vc3JjL2Rhc2hib2FyZC9jb21wb25lbnRzL1ZvbHVudGVlckZpbHRlcmVkU2VsZWN0J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5Wb2x1bnRlZXJGaWx0ZXJlZFNlbGVjdCA9IFZvbHVudGVlckZpbHRlcmVkU2VsZWN0XG5pbXBvcnQgU3RhdHVzRmlsdGVyZWRTZWxlY3QgZnJvbSAnLi4vc3JjL2Rhc2hib2FyZC9jb21wb25lbnRzL0FpZFJlcXVlc3RTdGF0dXNGaWx0ZXJlZFNlbGVjdCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuU3RhdHVzRmlsdGVyZWRTZWxlY3QgPSBTdGF0dXNGaWx0ZXJlZFNlbGVjdFxuaW1wb3J0IERvbmF0aW9uUmVxdWVzdFN0YXR1c0ZpbHRlcmVkU2VsZWN0IGZyb20gJy4uL3NyYy9kYXNoYm9hcmQvY29tcG9uZW50cy9Eb25hdGlvblJlcXVlc3RTdGF0dXNGaWx0ZXJlZFNlbGVjdCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuRG9uYXRpb25SZXF1ZXN0U3RhdHVzRmlsdGVyZWRTZWxlY3QgPSBEb25hdGlvblJlcXVlc3RTdGF0dXNGaWx0ZXJlZFNlbGVjdCJdLCJuYW1lcyI6WyJMaW5rQ29tcG9uZW50IiwicHJvcHMiLCJyZWNvcmQiLCJsYXQiLCJwYXJhbXMiLCJsb25nIiwiY29uc29sZSIsImxvZyIsIm1hcHNMaW5rIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsInRhcmdldCIsInJlbCIsImFwaSIsIkFwaUNsaWVudCIsIlZvbHVudGVlckZpbHRlcmVkU2VsZWN0IiwicHJvcGVydHkiLCJvbkNoYW5nZSIsInZvbHVudGVlcnMiLCJzZXRWb2x1bnRlZXJzIiwidXNlU3RhdGUiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsInVzZUVmZmVjdCIsImZldGNoVm9sdW50ZWVycyIsInJlc3BvbnNlIiwicmVzb3VyY2VBY3Rpb24iLCJyZXNvdXJjZUlkIiwiYWN0aW9uTmFtZSIsImRhdGEiLCJyZWNvcmRzIiwibWFwIiwidiIsInZhbHVlIiwiaWQiLCJsYWJlbCIsIm5hbWUiLCJoYW5kbGVDaGFuZ2UiLCJzZWxlY3RlZCIsInNlbGVjdGVkT3B0aW9uIiwiZmluZCIsIm9wdCIsIkZvcm1Hcm91cCIsIm1iIiwiTGFiZWwiLCJyZXF1aXJlZCIsIlNlbGVjdCIsIm9wdGlvbnMiLCJpc0xvYWRpbmciLCJpc0NsZWFyYWJsZSIsInBsYWNlaG9sZGVyIiwiZGVzY3JpcHRpb24iLCJGb3JtTWVzc2FnZSIsIlN0YXR1c0ZpbHRlcmVkU2VsZWN0Iiwic3RhdHVzIiwic2V0U3RhdHVzIiwiZmV0Y2hTdGF0dXMiLCJEb25hdGlvblJlcXVlc3RTdGF0dXNGaWx0ZXJlZFNlbGVjdCIsIkFkbWluSlMiLCJVc2VyQ29tcG9uZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztFQUdBLE1BQU1BLGFBQWEsR0FBSUMsS0FBSyxJQUFLO0lBQzdCLE1BQU07RUFBRUMsSUFBQUE7RUFBTyxHQUFDLEdBQUdELEtBQUs7RUFDeEIsRUFBQSxNQUFNRSxHQUFHLEdBQUlELE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLGdDQUFnQyxDQUFDO0VBQzVELEVBQUEsTUFBTUMsSUFBSSxHQUFHSCxNQUFNLENBQUNFLE1B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
