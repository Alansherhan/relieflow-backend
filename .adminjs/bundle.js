(function (React, adminjs, designSystem) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  const LinkComponent = props => {
    const {
      record
    } = props;
    const lat = record.params["address.location.coordinates.0"];
    const long = record.params["address.location.coordinates.1"];
    console.log(record);
    const mapsLink = `http://google.com/maps/@${lat},${long},15z`;
    return /*#__PURE__*/React__default.default.createElement("a", {
      href: mapsLink,
      target: "_blank",
      rel: "noopener noreferrer"
    }, "View Location");
  };

  const api = new adminjs.ApiClient();
  const VolunteerFilteredSelect = ({
    property,
    record,
    onChange
  }) => {
    const [volunteers, setVolunteers] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    React.useEffect(() => {
      const fetchVolunteers = async () => {
        setLoading(true);
        const response = await api.resourceAction({
          resourceId: 'userProfile',
          actionName: 'list',
          params: {
            'filters.role': 'volunteer'
          }
        });
        if (response.data && response.data.records) {
          console.log('mapping ', response.data.records);
          setVolunteers(response.data.records.map(v => ({
            value: v.id,
            label: v.params.name
          })));
        }
        setLoading(false);
      };
      fetchVolunteers();
    }, []);
    const handleChange = selected => {
      onChange(property.name, selected ? selected.value : '');
    };
    const selectedOption = volunteers.find(opt => opt.value === record.params[property.name]) || null;
    return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
      mb: 56
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      required: true
    }, 'Select Volunteer'), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      options: volunteers,
      value: selectedOption,
      isLoading: loading,
      onChange: handleChange,
      isClearable: true,
      placeholder: "Select volunteer\u2026"
    }), property.description && /*#__PURE__*/React__default.default.createElement(designSystem.FormMessage, null, property.description));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.LinkComponent = LinkComponent;
  AdminJS.UserComponents.VolunteerFilteredSelect = VolunteerFilteredSelect;

})(React, AdminJS, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvTGlua0NvbXBvbmVudC5qc3giLCIuLi9zcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvVm9sdW50ZWVyRmlsdGVyZWRTZWxlY3QuanN4IiwiZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmNvbnN0IExpbmtDb21wb25lbnQgPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHsgcmVjb3JkIH0gPSBwcm9wc1xyXG4gICAgY29uc3QgbGF0ICA9IHJlY29yZC5wYXJhbXNbXCJhZGRyZXNzLmxvY2F0aW9uLmNvb3JkaW5hdGVzLjBcIl1cclxuICAgIGNvbnN0IGxvbmcgPSByZWNvcmQucGFyYW1zW1wiYWRkcmVzcy5sb2NhdGlvbi5jb29yZGluYXRlcy4xXCJdXHJcbiAgY29uc29sZS5sb2cocmVjb3JkKVxyXG4gIGNvbnN0IG1hcHNMaW5rID0gYGh0dHA6Ly9nb29nbGUuY29tL21hcHMvQCR7bGF0fSwke2xvbmd9LDE1emBcclxuXHJcbiAgcmV0dXJuIChcclxuXHJcblxyXG4gICAgICA8YSBocmVmPXttYXBzTGlua30gdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPlxyXG4gICAgICAgIFZpZXcgTG9jYXRpb25cclxuICAgICAgPC9hPlxyXG5cclxuICAgIFxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGlua0NvbXBvbmVudFxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQXBpQ2xpZW50IH0gZnJvbSAnYWRtaW5qcyc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgTGFiZWwsIFNlbGVjdCwgRm9ybU1lc3NhZ2UgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKTtcclxuXHJcbmNvbnN0IFZvbHVudGVlckZpbHRlcmVkU2VsZWN0ID0gKHsgcHJvcGVydHksIHJlY29yZCwgb25DaGFuZ2UgfSkgPT4ge1xyXG4gIGNvbnN0IFt2b2x1bnRlZXJzLCBzZXRWb2x1bnRlZXJzXSA9IHVzZVN0YXRlKFtdKTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGZldGNoVm9sdW50ZWVycyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgc2V0TG9hZGluZyh0cnVlKTtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucmVzb3VyY2VBY3Rpb24oe1xyXG4gICAgICAgIHJlc291cmNlSWQ6ICd1c2VyUHJvZmlsZScsXHJcbiAgICAgICAgYWN0aW9uTmFtZTogJ2xpc3QnLFxyXG4gICAgICAgIHBhcmFtczogeyAnZmlsdGVycy5yb2xlJzogJ3ZvbHVudGVlcicgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEucmVjb3Jkcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtYXBwaW5nICcsIHJlc3BvbnNlLmRhdGEucmVjb3JkcylcclxuICAgICAgICBzZXRWb2x1bnRlZXJzKHJlc3BvbnNlLmRhdGEucmVjb3Jkcy5tYXAodiA9PiAoe1xyXG4gICAgICAgICAgdmFsdWU6IHYuaWQsXHJcbiAgICAgICAgICBsYWJlbDogdi5wYXJhbXMubmFtZSxcclxuICAgICAgICB9KSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIGZldGNoVm9sdW50ZWVycygpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gc2VsZWN0ZWQgPT4ge1xyXG4gICAgb25DaGFuZ2UocHJvcGVydHkubmFtZSwgc2VsZWN0ZWQgPyBzZWxlY3RlZC52YWx1ZSA6ICcnKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBzZWxlY3RlZE9wdGlvbiA9IHZvbHVudGVlcnMuZmluZChvcHQgPT4gb3B0LnZhbHVlID09PSByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdKSB8fCBudWxsO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEZvcm1Hcm91cCBtYj17NTZ9PlxyXG4gICAgICA8TGFiZWwgcmVxdWlyZWQ+eydTZWxlY3QgVm9sdW50ZWVyJ308L0xhYmVsPlxyXG4gICAgICA8U2VsZWN0XHJcbiAgICAgICAgb3B0aW9ucz17dm9sdW50ZWVyc31cclxuICAgICAgICB2YWx1ZT17c2VsZWN0ZWRPcHRpb259XHJcbiAgICAgICAgaXNMb2FkaW5nPXtsb2FkaW5nfVxyXG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgaXNDbGVhcmFibGVcclxuICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCB2b2x1bnRlZXLigKZcIlxyXG4gICAgICAvPlxyXG4gICAgICB7cHJvcGVydHkuZGVzY3JpcHRpb24gJiYgKFxyXG4gICAgICAgIDxGb3JtTWVzc2FnZT57cHJvcGVydHkuZGVzY3JpcHRpb259PC9Gb3JtTWVzc2FnZT5cclxuICAgICAgKX1cclxuICAgIDwvRm9ybUdyb3VwPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWb2x1bnRlZXJGaWx0ZXJlZFNlbGVjdDtcclxuIiwiQWRtaW5KUy5Vc2VyQ29tcG9uZW50cyA9IHt9XG5pbXBvcnQgTGlua0NvbXBvbmVudCBmcm9tICcuLi9zcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvTGlua0NvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuTGlua0NvbXBvbmVudCA9IExpbmtDb21wb25lbnRcbmltcG9ydCBWb2x1bnRlZXJGaWx0ZXJlZFNlbGVjdCBmcm9tICcuLi9zcmMvZGFzaGJvYXJkL2NvbXBvbmVudHMvVm9sdW50ZWVyRmlsdGVyZWRTZWxlY3QnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlZvbHVudGVlckZpbHRlcmVkU2VsZWN0ID0gVm9sdW50ZWVyRmlsdGVyZWRTZWxlY3QiXSwibmFtZXMiOlsiTGlua0NvbXBvbmVudCIsInByb3BzIiwicmVjb3JkIiwibGF0IiwicGFyYW1zIiwibG9uZyIsImNvbnNvbGUiLCJsb2ciLCJtYXBzTGluayIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJ0YXJnZXQiLCJyZWwiLCJhcGkiLCJBcGlDbGllbnQiLCJWb2x1bnRlZXJGaWx0ZXJlZFNlbGVjdCIsInByb3BlcnR5Iiwib25DaGFuZ2UiLCJ2b2x1bnRlZXJzIiwic2V0Vm9sdW50ZWVycyIsInVzZVN0YXRlIiwibG9hZGluZyIsInNldExvYWRpbmciLCJ1c2VFZmZlY3QiLCJmZXRjaFZvbHVudGVlcnMiLCJyZXNwb25zZSIsInJlc291cmNlQWN0aW9uIiwicmVzb3VyY2VJZCIsImFjdGlvbk5hbWUiLCJkYXRhIiwicmVjb3JkcyIsIm1hcCIsInYiLCJ2YWx1ZSIsImlkIiwibGFiZWwiLCJuYW1lIiwiaGFuZGxlQ2hhbmdlIiwic2VsZWN0ZWQiLCJzZWxlY3RlZE9wdGlvbiIsImZpbmQiLCJvcHQiLCJGb3JtR3JvdXAiLCJtYiIsIkxhYmVsIiwicmVxdWlyZWQiLCJTZWxlY3QiLCJvcHRpb25zIiwiaXNMb2FkaW5nIiwiaXNDbGVhcmFibGUiLCJwbGFjZWhvbGRlciIsImRlc2NyaXB0aW9uIiwiRm9ybU1lc3NhZ2UiLCJBZG1pbkpTIiwiVXNlckNvbXBvbmVudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7RUFHQSxNQUFNQSxhQUFhLEdBQUlDLEtBQUssSUFBSztJQUM3QixNQUFNO0VBQUVDLElBQUFBO0VBQU8sR0FBQyxHQUFHRCxLQUFLO0VBQ3hCLEVBQUEsTUFBTUUsR0FBRyxHQUFJRCxNQUFNLENBQUNFLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQztFQUM1RCxFQUFBLE1BQU1DLElBQUksR0FBR0gsTUFBTSxDQUFDRSxNQUFNLENBQUMsZ0NBQWdDLENBQUM7RUFDOURFLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDTCxNQUFNLENBQUM7RUFDbkIsRUFBQSxNQUFNTSxRQUFRLEdBQUcsQ0FBQSx3QkFBQSxFQUEyQkwsR0FBRyxDQUFBLENBQUEsRUFBSUUsSUFBSSxDQUFBLElBQUEsQ0FBTTtJQUU3RCxvQkFHSUksc0JBQUEsQ0FBQUMsYUFBQSxDQUFBLEdBQUEsRUFBQTtFQUFHQyxJQUFBQSxJQUFJLEVBQUVILFFBQVM7RUFBQ0ksSUFBQUEsTUFBTSxFQUFDLFFBQVE7RUFBQ0MsSUFBQUEsR0FBRyxFQUFDO0VBQXFCLEdBQUEsRUFBQyxlQUUxRCxDQUFDO0VBSVYsQ0FBQzs7RUNmRCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsaUJBQVMsRUFBRTtFQUUzQixNQUFNQyx1QkFBdUIsR0FBR0EsQ0FBQztJQUFFQyxRQUFRO0lBQUVmLE1BQU07RUFBRWdCLEVBQUFBO0VBQVMsQ0FBQyxLQUFLO0lBQ2xFLE1BQU0sQ0FBQ0MsVUFBVSxFQUFFQyxhQUFhLENBQUMsR0FBR0MsY0FBUSxDQUFDLEVBQUUsQ0FBQztJQUNoRCxNQUFNLENBQUNDLE9BQU8sRUFBRUMsVUFBVSxDQUFDLEdBQUdGLGNBQVEsQ0FBQyxJQUFJLENBQUM7RUFFNUNHLEVBQUFBLGVBQVMsQ0FBQyxNQUFNO0VBQ2QsSUFBQSxNQUFNQyxlQUFlLEdBQUcsWUFBWTtRQUNsQ0YsVUFBVSxDQUFDLElBQUksQ0FBQztFQUNoQixNQUFBLE1BQU1HLFFBQVEsR0FBRyxNQUFNWixHQUFHLENBQUNhLGNBQWMsQ0FBQztFQUN4Q0MsUUFBQUEsVUFBVSxFQUFFLGFBQWE7RUFDekJDLFFBQUFBLFVBQVUsRUFBRSxNQUFNO0VBQ2xCekIsUUFBQUEsTUFBTSxFQUFFO0VBQUUsVUFBQSxjQUFjLEVBQUU7RUFBWTtFQUN4QyxPQUFDLENBQUM7UUFDRixJQUFJc0IsUUFBUSxDQUFDSSxJQUFJLElBQUlKLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDQyxPQUFPLEVBQUU7VUFDMUN6QixPQUFPLENBQUNDLEdBQUcsQ0FBQyxVQUFVLEVBQUVtQixRQUFRLENBQUNJLElBQUksQ0FBQ0MsT0FBTyxDQUFDO1VBQzlDWCxhQUFhLENBQUNNLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsQ0FBQyxLQUFLO1lBQzVDQyxLQUFLLEVBQUVELENBQUMsQ0FBQ0UsRUFBRTtFQUNYQyxVQUFBQSxLQUFLLEVBQUVILENBQUMsQ0FBQzdCLE1BQU0sQ0FBQ2lDO1dBQ2pCLENBQUMsQ0FBQyxDQUFDO0VBQ04sTUFBQTtRQUNBZCxVQUFVLENBQUMsS0FBSyxDQUFDO01BQ25CLENBQUM7RUFDREUsSUFBQUEsZUFBZSxFQUFFO0lBQ25CLENBQUMsRUFBRSxFQUFFLENBQUM7SUFFTixNQUFNYSxZQUFZLEdBQUdDLFFBQVEsSUFBSTtFQUMvQnJCLElBQUFBLFFBQVEsQ0FBQ0QsUUFBUSxDQUFDb0IsSUFBSSxFQUFFRSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0wsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRUQsTUFBTU0sY0FBYyxHQUFHckIsVUFBVSxDQUFDc0IsSUFBSSxDQUFDQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ1IsS0FBSyxLQUFLaEMsTUFBTSxDQUFDRSxNQUFNLENBQUNhLFFBQVEsQ0FBQ29CLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSTtFQUVqRyxFQUFBLG9CQUNFNUIsc0JBQUEsQ0FBQUMsYUFBQSxDQUFDaUMsc0JBQVMsRUFBQTtFQUFDQyxJQUFBQSxFQUFFLEVBQUU7RUFBRyxHQUFBLGVBQ2hCbkMsc0JBQUEsQ0FBQUMsYUFBQSxDQUFDbUMsa0JBQUssRUFBQTtNQUFDQyxRQUFRLEVBQUE7RUFBQSxHQUFBLEVBQUUsa0JBQTBCLENBQUMsZUFDNUNyQyxzQkFBQSxDQUFBQyxhQUFBLENBQUNxQyxtQkFBTSxFQUFBO0VBQ0xDLElBQUFBLE9BQU8sRUFBRTdCLFVBQVc7RUFDcEJlLElBQUFBLEtBQUssRUFBRU0sY0FBZTtFQUN0QlMsSUFBQUEsU0FBUyxFQUFFM0IsT0FBUTtFQUNuQkosSUFBQUEsUUFBUSxFQUFFb0IsWUFBYTtNQUN2QlksV0FBVyxFQUFBLElBQUE7RUFDWEMsSUFBQUEsV0FBVyxFQUFDO0VBQW1CLEdBQ2hDLENBQUMsRUFDRGxDLFFBQVEsQ0FBQ21DLFdBQVcsaUJBQ25CM0Msc0JBQUEsQ0FBQUMsYUFBQSxDQUFDMkMsd0JBQVcsRUFBQSxJQUFBLEVBQUVwQyxRQUFRLENBQUNtQyxXQUF5QixDQUV6QyxDQUFDO0VBRWhCLENBQUM7O0VDcERERSxPQUFPLENBQUNDLGNBQWMsR0FBRyxFQUFFO0VBRTNCRCxPQUFPLENBQUNDLGNBQWMsQ0FBQ3ZELGFBQWEsR0FBR0EsYUFBYTtFQUVwRHNELE9BQU8sQ0FBQ0MsY0FBYyxDQUFDdkMsdUJBQXVCLEdBQUdBLHVCQUF1Qjs7Ozs7OyJ9
